{"ast":null,"code":"var _jsxFileName = \"C:\\\\My Projects\\\\RaftlabsNodejsAssignment2\\\\group-chat-app\\\\src\\\\components\\\\chatApp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from \"socket.io-client\";\n\n//const socket = io('http://localhost:5000'); // Replace with your server URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar socket;\nconst ENDPOINT = \"http://localhost:5000\";\nconst ChatApp = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const room = 'your-room-name'; // Replace with the room name you want to join\n\n  useEffect(() => {\n    socket.on('receiveMessage', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n\n    // Join the specified room on component mount\n    socket.emit('joinRoom', room);\n    return () => {\n      // Leave the room when the component unmounts\n      socket.emit('leaveRoom', room);\n    };\n  }, [room]);\n  const sendMessage = () => {\n    if (inputMessage.trim() !== '') {\n      const newMessage = {\n        user: 'User',\n        // Replace this with the actual user name or ID\n        content: inputMessage\n      };\n      socket.emit('sendMessage', newMessage, room);\n      setInputMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.user, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), \" \", message.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatApp, \"1WkayelnqvMoL79TmbATg/1hsWM=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","ENDPOINT","ChatApp","_s","messages","setMessages","inputMessage","setInputMessage","room","on","message","prevMessages","emit","sendMessage","trim","newMessage","user","content","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/My Projects/RaftlabsNodejsAssignment2/group-chat-app/src/components/chatApp.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from \"socket.io-client\";\r\n\r\n//const socket = io('http://localhost:5000'); // Replace with your server URL\r\nvar socket;\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nconst ChatApp = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [inputMessage, setInputMessage] = useState('');\r\n    const room = 'your-room-name'; // Replace with the room name you want to join\r\n\r\n    useEffect(() => {\r\n        socket.on('receiveMessage', (message) => {\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n        });\r\n\r\n        // Join the specified room on component mount\r\n        socket.emit('joinRoom', room);\r\n\r\n        return () => {\r\n            // Leave the room when the component unmounts\r\n            socket.emit('leaveRoom', room);\r\n        };\r\n    }, [room]);\r\n\r\n    const sendMessage = () => {\r\n        if (inputMessage.trim() !== '') {\r\n            const newMessage = {\r\n                user: 'User', // Replace this with the actual user name or ID\r\n                content: inputMessage,\r\n            };\r\n            socket.emit('sendMessage', newMessage, room);\r\n            setInputMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {messages.map((message, index) => (\r\n                    <div key={index}>\r\n                        <strong>{message.user}:</strong> {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputMessage}\r\n                    onChange={(e) => setInputMessage(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,IAAIC,MAAM;AACV,MAAMC,QAAQ,GAAG,uBAAuB;AACxC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMa,IAAI,GAAG,gBAAgB,CAAC,CAAC;;EAE/BZ,SAAS,CAAC,MAAM;IACZI,MAAM,CAACS,EAAE,CAAC,gBAAgB,EAAGC,OAAO,IAAK;MACrCL,WAAW,CAAEM,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,OAAO,CAAC,CAAC;IAC7D,CAAC,CAAC;;IAEF;IACAV,MAAM,CAACY,IAAI,CAAC,UAAU,EAAEJ,IAAI,CAAC;IAE7B,OAAO,MAAM;MACT;MACAR,MAAM,CAACY,IAAI,CAAC,WAAW,EAAEJ,IAAI,CAAC;IAClC,CAAC;EACL,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAIP,YAAY,CAACQ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5B,MAAMC,UAAU,GAAG;QACfC,IAAI,EAAE,MAAM;QAAE;QACdC,OAAO,EAAEX;MACb,CAAC;MACDN,MAAM,CAACY,IAAI,CAAC,aAAa,EAAEG,UAAU,EAAEP,IAAI,CAAC;MAC5CD,eAAe,CAAC,EAAE,CAAC;IACvB;EACJ,CAAC;EAED,oBACIR,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EACKd,QAAQ,CAACe,GAAG,CAAC,CAACT,OAAO,EAAEU,KAAK,kBACzBrB,OAAA;QAAAmB,QAAA,gBACInB,OAAA;UAAAmB,QAAA,GAASR,OAAO,CAACM,IAAI,EAAC,GAAC;QAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACd,OAAO,CAACO,OAAO;MAAA,GAD3CG,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNzB,OAAA;MAAAmB,QAAA,gBACInB,OAAA;QACI0B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEpB,YAAa;QACpBqB,QAAQ,EAAGC,CAAC,IAAKrB,eAAe,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC,eACFzB,OAAA;QAAQ+B,OAAO,EAAEjB,WAAY;QAAAK,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACrB,EAAA,CAjDID,OAAO;AAAA6B,EAAA,GAAP7B,OAAO;AAmDb,eAAeA,OAAO;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}